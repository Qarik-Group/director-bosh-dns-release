---
#
# ci/pipeline.yml
#
# Pipeline structure file for a BOSH Release pipeline
#
# DO NOT MAKE CHANGES TO THIS FILE.  Instead, modify
# ci/settings.yml and override what needs overridden.
# This uses spruce, so you have some options there.
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

meta:
  name:     (( param "Please name your pipeline" ))
  release:  (( grab meta.name ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))
  manifest:
    path:   "manifests/director-bosh-dns.yml"
    vars:   "--- {}"
    vars-pr: (( grab meta.manifest.vars ))
    operator_file_paths: "" # comma separated list relative to repo root

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  image:
    name: starkandwayne/concourse
    tag: latest

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       master
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh-lite:
    target:     (( param "Please specify the BOSH target URI for the bosh-lite to run test deployments against" ))
    cacert:     (( param "Please specify the BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the BOSH Director admin password" ))
    deployment:    (( concat meta.name "-testflight" ))
    deployment-pr: (( concat meta.name "-testflight-pr" ))

groups:
  - name: (( grab meta.pipeline ))
    jobs:
      - testflight
      - testflight-pr
      - rc
      - shipit
  - name: versioning
    jobs:
      - major
      - minor
      - patch

jobs:
  - name: testflight
    public: true
    serial: true
    plan:
    - name: main
      do:
      - name: get
        aggregate:
        - { get: git, trigger: true }
      - name: testflights
        aggregate:
        - name: testflight
          task: testflight
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            inputs:
              - { name: git }
            run:
              path: ./git/ci/scripts/testflight
              args: []
            params:
              REPO_ROOT:            git
              BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
              BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
              BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
              BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
              BOSH_DEPLOYMENT:      (( grab meta.bosh-lite.deployment ))
              TEST_ERRANDS:         (( grab meta.test-errands || meta.test-errand || ~ ))
              MANIFEST_PATH:        (( grab meta.manifest.path ))
              MANIFEST_VARS:        (( grab meta.manifest.vars ))
              MANIFEST_OP_PATHS:    (( grab meta.manifest.operator_file_paths ))

  - name: testflight-pr
    public: true
    serial: true
    plan:
    - name: main
      do:
      - name: get
        aggregate:
          - { get: git-pull-requests, trigger: true, version: every }
      - name: pending-status
        put: git-pull-requests
        params:
          path: git-pull-requests
          status: pending
      - name: testflights
        aggregate:
        - name: testflight
          task: testflight
          config:
            platform: linux
            image_resource:
              type: docker-image
              source:
                repository: (( grab meta.image.name ))
                tag:        (( grab meta.image.tag ))
            inputs:
              - { name: git-pull-requests }
            run:
              path: ./git-pull-requests/ci/scripts/testflight
              args: []
            params:
              REPO_ROOT:            git-pull-requests
              BOSH_ENVIRONMENT:     (( grab meta.bosh-lite.target ))
              BOSH_CA_CERT:         (( grab meta.bosh-lite.cacert ))
              BOSH_CLIENT:          (( grab meta.bosh-lite.username ))
              BOSH_CLIENT_SECRET:   (( grab meta.bosh-lite.password ))
              BOSH_DEPLOYMENT:      (( grab meta.bosh-lite.deployment-pr ))
              TEST_ERRANDS:         (( grab meta.test-errands || meta.test-errand || ~ ))
              MANIFEST_PATH:        (( grab meta.manifest.path ))
              MANIFEST_VARS:        (( grab meta.manifest.vars-pr ))
              MANIFEST_OP_PATHS:    (( grab meta.manifest.operator_file_paths ))
          on_success:
            put: git-pull-requests
            params:
              path: git-pull-requests
              status: success
          on_failure:
            put: git-pull-requests
            params:
              path: git-pull-requests
              status: failure
      - name: pr-success-message
        task: pr-success-message
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - { name: git-pull-requests }
          outputs:
            - { name: message }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git-pull-requests
              pr_url=$(git config --get pullrequest.url)
              cd -
              echo "<${pr_url}|Pull request passed testflight> Merge when ready: ${pr_url}" > message/body

  - name: rc
    public: true
    serial: true
    plan:
    - do:
      - aggregate:
          - { get: git,     trigger: true,  passed: [testflight] }
          - { get: version, trigger: true, params: {pre: rc} }
      - task: release-notes
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
              - { name: git }
          run:
            path: sh
            args:
            - -ce
            - |
              cd git
              if [ -f ci/release_notes.md ]; then
                echo "######   RELEASE NOTES   ###############"
                echo
                cat ci/release_notes.md
                echo
                echo "########################################"
                echo
              else
                echo "NO RELEASE NOTES HAVE BEEN WRITTEN"
                echo "You *might* want to do that before"
                echo "hitting (+) on that shipit job..."
                echo
              fi
      - put: version
        params: {file: version/number}

  - name: minor
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: minor} }
      - { put: version,                 params: {file: version/number} }

  - name: patch
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: patch} }
      - { put: version,                 params: {file: version/number} }

  - name: major
    public: true
    plan:
    - do:
      - { get: version, trigger: false, params: {bump: major} }
      - { put: version,                 params: {file: version/number} }

  - name: shipit
    public: true
    serial: true
    plan:
    - do:
      - name: inputs
        aggregate:
          - { get: version, passed: [rc], params: {bump: final} }
          - { get: git,     passed: [rc] }
      - name: release
        task: release
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: version
            - name: git
          outputs:
            - name: gh
            - name: pushme
            - name: notifications
          run:
            path: ./git/ci/scripts/shipit
            args: []
          params:
            REPO_ROOT:    git
            VERSION_FROM: version/number
            RELEASE_ROOT: gh
            REPO_OUT:     pushme
            NOTIFICATION_OUT: notifications
            BRANCH:        (( grab meta.github.branch ))
            GITHUB_OWNER:  (( grab meta.github.owner ))
            GIT_EMAIL:      (( grab meta.git.email ))
            GIT_NAME:       (( grab meta.git.name ))

      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme
      - name: github-release
        put: github
        params:
          name:   gh/name
          tag:    gh/tag
          body:   gh/notes.md
          globs: [gh/artifacts/*]
      - name: version-bump
        put: version
        params:
          bump: patch

resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: jtarchie/pr

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: git-pull-requests
    type: pull-request
    check_every: 15m # Required due to API throttling.
    source:
      access_token: (( grab meta.github.access_token ))
      private_key:  (( grab meta.github.private_key ))
      repo:         (( concat meta.github.owner "/" meta.github.repo ))
      base:         (( grab meta.github.branch ))

  - name: version
    type: semver
    source :
      driver: git
      uri: (( grab meta.github.uri ))
      branch: version
      file: version
      private_key: (( grab meta.github.private_key ))
      initial_version: (( grab meta.initial_version || "0.0.1" ))

  - name: github
    type: github-release
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))
